/*
 * Waiting List Api
 *
 * Ambulance Waiting List management for Web-In-Cloud system
 *
 * API version: 1.0.0
 * Contact: aa@bb.com
 * Generated by: OpenAPI Generator (https://openapi-generator.tech)
 */

package router

import (
	restapi "ambulance-webapi/rest-api"
	"net/http"
	"time"

	cors "github.com/itsjamie/gin-cors"

	"github.com/gin-gonic/gin"
)

// Route is the information for every URI.
type Route struct {
	// Name is the name of this Route.
	Name string
	// Method is the string for the HTTP method. ex) GET, POST etc..
	Method string
	// Pattern is the pattern of the URI.
	Pattern string
	// HandlerFunc is the handler function of this route.
	HandlerFunc gin.HandlerFunc
}

// Routes is the list of the generated Route.
type Routes []Route

// NewRouter returns a new router.
func NewRouter() *gin.Engine {
	router := gin.Default()

	corsConfig := cors.Config{
		Origins:         "*",
		Methods:         "GET, PUT, POST, DELETE, PATCH",
		RequestHeaders:  "Origin, Authorization, Content-Type",
		ExposedHeaders:  "",
		MaxAge:          12 * time.Hour,
		Credentials:     false,
		ValidateHeaders: false,
	}
	router.Use(cors.Middleware(corsConfig))

	for _, route := range routes {
		switch route.Method {
		case http.MethodGet:
			router.GET(route.Pattern, route.HandlerFunc)
		case http.MethodPost:
			router.POST(route.Pattern, route.HandlerFunc)
		case http.MethodPut:
			router.PUT(route.Pattern, route.HandlerFunc)
		case http.MethodPatch:
			router.PATCH(route.Pattern, route.HandlerFunc)
		case http.MethodDelete:
			router.DELETE(route.Pattern, route.HandlerFunc)
		}
	}

	return router
}

// Index is the index handler.
func Index(c *gin.Context) {
	c.String(http.StatusOK, "Hello World!")
}

var routes = Routes{
	{
		"Index",
		http.MethodGet,
		"/api/",
		Index,
	},

	{
		"CreateAmbulanceDetails",
		http.MethodPost,
		"/api/waiting-list/:ambulanceId",
		restapi.CreateAmbulanceDetails,
	},

	{
		"DeleteCondition",
		http.MethodDelete,
		"/api/waiting-list/:ambulanceId/condition/:conditionCode",
		restapi.DeleteCondition,
	},

	{
		"StoreCondition",
		http.MethodPost,
		"/api/waiting-list/:ambulanceId/condition",
		restapi.StoreCondition,
	},

	{
		"DeleteWaitingListEntry",
		http.MethodDelete,
		"/api/waiting-list/:ambulanceId/entry/:entryId",
		restapi.DeleteWaitingListEntry,
	},

	{
		"GetAmbulanceDetails",
		http.MethodGet,
		"/api/waiting-list/:ambulanceId",
		restapi.GetAmbulanceDetails,
	},

	{
		"GetCondition",
		http.MethodGet,
		"/api/waiting-list/:ambulanceId/condition/:conditionCode",
		restapi.GetCondition,
	},

	{
		"GetConditions",
		http.MethodGet,
		"/api/waiting-list/:ambulanceId/condition",
		restapi.GetConditions,
	},

	{
		"GetWaitingListEntries",
		http.MethodGet,
		"/api/waiting-list/:ambulanceId/entries",
		restapi.GetWaitingListEntries,
	},

	{
		"GetWaitingListEntry",
		http.MethodGet,
		"/api/waiting-list/:ambulanceId/entry/:entryId",
		restapi.GetWaitingListEntry,
	},

	{
		"StoreWaitingListEntry",
		http.MethodPost,
		"/api/waiting-list/:ambulanceId/entry",
		restapi.StoreWaitingListEntry,
	},

	{
		"UpdateCondition",
		http.MethodPost,
		"/api/waiting-list/:ambulanceId/condition/:conditionCode",
		restapi.UpdateCondition,
	},

	{
		"UpdateWaitingListEntry",
		http.MethodPost,
		"/api/waiting-list/:ambulanceId/entry/:entryId",
		restapi.UpdateWaitingListEntry,
	},
}
