/*
 * Waiting List Api
 *
 * Ambulance Waiting List management for Web-In-Cloud system
 *
 * API version: 1.0.0
 * Contact: aa@bb.com
 * Generated by: OpenAPI Generator (https://openapi-generator.tech)
 */

package restapi

import (
	dbservice "ambulance-webapi/db-service"
	"ambulance-webapi/models"
	"net/http"

	"github.com/gin-gonic/gin"
)

// DeleteWaitingListEntry - Deletes specific entry
func DeleteWaitingListEntry(c *gin.Context) {
	err := dbservice.DeleteWaitingListEntry(c.Param("ambulanceId"), c.Param("entryId"))
	if err != nil {
		c.JSON(http.StatusBadRequest, gin.H{"error": err.Error()})
		return
	}
	c.JSON(http.StatusOK, gin.H{})
}

// GetAmbulanceDetails - Provides waiting list of the ambulance
func GetAmbulanceDetails(c *gin.Context) {
	ambulance, err := dbservice.GetAmbulance(c.Param("ambulanceId"))
	if err != nil {
		c.JSON(http.StatusBadRequest, gin.H{"error": err.Error()})
		return
	}

	c.JSON(http.StatusOK, ambulance)
}

// GetCondition - Provides details about given condition
func GetCondition(c *gin.Context) {
	c.JSON(http.StatusNotImplemented, gin.H{})
}

// GetConditions - Provides the list of conditions associated with ambulance
func GetConditions(c *gin.Context) {
	ambulance, err := dbservice.GetAmbulance(c.Param("ambulanceId"))
	if err != nil {
		c.JSON(http.StatusBadRequest, gin.H{"error": err.Error()})
		return
	}

	// v pripade, ze je zoznam prazdny(nil), vratime prazdne pole, aby klient nemal problem
	if ambulance.PredefinedConditions == nil {
		ambulance.PredefinedConditions = []models.Condition{}
	}

	c.JSON(http.StatusOK, ambulance.PredefinedConditions)
}

// GetWaitingListEntries - Provides the ambulance waiting list
func GetWaitingListEntries(c *gin.Context) {
	ambulance, err := dbservice.GetAmbulance(c.Param("ambulanceId"))
	if err != nil {
		c.JSON(http.StatusBadRequest, gin.H{"error": err.Error()})
		return
	}

	// v pripade, ze je zoznam prazdny(nil), vratime prazdne pole, aby klient nemal problem
	if ambulance.WaitingList == nil {
		ambulance.WaitingList = []models.WaitingListEntry{}
	}

	c.JSON(http.StatusOK, ambulance.WaitingList)
}

// GetWaitingListEntry - Provides details about waiting list entry
func GetWaitingListEntry(c *gin.Context) {
	ambulanceId := c.Param("ambulanceId")
	entryId := c.Param("entryId")

	ambulance, err := dbservice.GetAmbulance(ambulanceId)
	if err != nil {
		c.JSON(http.StatusBadRequest, gin.H{"error": err.Error()})
		return
	}

	for _, entry := range ambulance.WaitingList {
		if entry.Id == entryId {
			c.JSON(http.StatusOK, entry)
			return
		}
	}

	c.JSON(http.StatusBadRequest, gin.H{"error": "Given entryId not found in DB"})
}

// StoreWaitingListEntry - Saves new entry into waiting list
func StoreWaitingListEntry(c *gin.Context) {
	ambulance, err := dbservice.GetAmbulance(c.Param("ambulanceId"))
	if err != nil {
		c.JSON(http.StatusBadRequest, gin.H{"error": err.Error()})
		return
	}

	var waitingListEntry models.WaitingListEntry
	if err := c.ShouldBindJSON(&waitingListEntry); err != nil {
		c.JSON(http.StatusBadRequest, gin.H{"error": err.Error()})
		return
	}

	if ambulance.ContainsWaitingListEntry(waitingListEntry) {
		errorMessage := "Patient with PatientId " + waitingListEntry.PatientId + " already in waiting list"
		c.JSON(http.StatusBadRequest, gin.H{"error": errorMessage})
		return
	}

	updatedWaitingList := append(ambulance.WaitingList, waitingListEntry)
	if err := dbservice.UpdateWaitingListForAmbulance(ambulance.Id, updatedWaitingList); err != nil {
		c.JSON(http.StatusBadRequest, gin.H{"error": err.Error()})
		return
	}

	c.JSON(http.StatusOK, gin.H{})
}

// UpdateCondition - Updates specific condition
func UpdateCondition(c *gin.Context) {
	c.JSON(http.StatusNotImplemented, gin.H{})
}

// UpdateWaitingListEntry - Updates specific entry
func UpdateWaitingListEntry(c *gin.Context) {
	ambulanceId := c.Param("ambulanceId")
	entryId := c.Param("entryId")

	var entry models.WaitingListEntry
	if err := c.ShouldBindJSON(&entry); err != nil {
		c.JSON(http.StatusBadRequest, gin.H{"error": err.Error()})
		return
	}

	ambulance, err := dbservice.GetAmbulance(ambulanceId)
	if err != nil {
		c.JSON(http.StatusBadRequest, gin.H{"error": err.Error()})
		return
	}

	foundIndex := -1
	for index, entry := range ambulance.WaitingList {
		if entry.Id == entryId {
			foundIndex = index
		}
	}

	if foundIndex == -1 {
		errorMessage := "Patient with id " + entryId + " is not in the database!"
		c.JSON(http.StatusBadRequest, gin.H{"error": errorMessage})
		return
	}

	ambulance.WaitingList[foundIndex] = entry

	if err := dbservice.UpdateWaitingListForAmbulance(ambulance.Id, ambulance.WaitingList); err != nil {
		c.JSON(http.StatusBadRequest, gin.H{"error": err.Error()})
		return
	}

	c.JSON(http.StatusOK, gin.H{})
}
